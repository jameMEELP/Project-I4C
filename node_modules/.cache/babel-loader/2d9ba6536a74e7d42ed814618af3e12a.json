{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/kk/I4C/src/Upload.js\";\n// import React from 'react';\n// function Upload(){\n//     return(\n//         <h1>Upload</h1>\n//     );\n// }\n// export default Upload;\nimport React, { Component } from \"react\";\nimport IPFSInboxContract from \"./IPFSInbox.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\nimport ipfs from './ipfs';\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const Contract = truffleContract(IPFSInboxContract);\n        Contract.setProvider(web3.currentProvider);\n        const instance = await Contract.deployed();\n        instance.inboxResponse().on('data', result => {\n          this.setState({\n            receivedIPFS: result.args[0]\n          });\n        }); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.log(error);\n      }\n    };\n\n    this.convertToBuffer = async reader => {\n      //file is converted to a buffer for upload to IPFS\n      const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n      this.setState({\n        buffer\n      });\n    };\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.onIPFSSubmit = async event => {\n      event.preventDefault(); //bring in user's metamask account address\n\n      const accounts = this.state.accounts;\n      console.log('Sending from Metamask account: ' + accounts[0]); //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash \n\n        this.setState({\n          ipfsHash: ipfsHash[0].hash\n        });\n      });\n    };\n\n    this.onClick = async event => {\n      //\n      if (this.state.ipfsHash == null) {\n        alert('Error!! ,Please upload file first.');\n      } else {\n        var url = \"https://gateway.ipfs.io/ipfs/\";\n        var hash = this.state.ipfsHash;\n        window.location.href = url + hash;\n      }\n    };\n\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      ipfsHash: null,\n      formIPFS: \"\",\n      formAddress: \"\",\n      receivedIPFS: \"\"\n    };\n    this.handleChangeAddress = this.handleChangeAddress.bind(this);\n    this.handleChangeIPFS = this.handleChangeIPFS.bind(this);\n    this.handleSend = this.handleSend.bind(this);\n    this.handleReceiveIPFS = this.handleReceiveIPFS.bind(this);\n  }\n\n  // BELOW ADDED\n  handleChangeAddress(event) {\n    this.setState({\n      formAddress: event.target.value\n    });\n  }\n\n  handleChangeIPFS(event) {\n    this.setState({\n      formIPFS: event.target.value\n    });\n  }\n\n  handleSend(event) {\n    event.preventDefault();\n    const contract = this.state.contract;\n    const account = this.state.accounts[0];\n    document.getElementById('new-notification-form').reset();\n    this.setState({\n      showNotification: true\n    });\n    contract.sendIPFS(this.state.formAddress, this.state.formIPFS, {\n      from: account\n    }).then(result => {\n      this.setState({\n        formAddress: \"\"\n      });\n      this.setState({\n        formIPFS: \"\"\n      });\n    });\n  }\n\n  handleReceiveIPFS(event) {\n    event.preventDefault();\n    const contract = this.state.contract;\n    const account = this.state.accounts[0];\n    contract.checkInbox({\n      from: account\n    });\n  }\n\n  // ABOVE ADDED \n  download(file) {\n    if (file != null) window.location = file;\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Upload a file to IPFS\"), React.createElement(\"form\", {\n      id: \"ipfs-hash-form\",\n      className: \"scep-form\",\n      onSubmit: this.onIPFSSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Upload\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \" The IPFS hash is: \", this.state.ipfsHash), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Go to File\"), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Click\",\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })), React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"download\"), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Download\",\n      onClick: this.download('https://gateway.ipfs.io/ipfs/' + this.state.ipfsHash),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["/Users/macbookpro/Desktop/kk/I4C/src/Upload.js"],"names":["React","Component","IPFSInboxContract","getWeb3","truffleContract","ipfs","Upload","constructor","props","componentDidMount","web3","accounts","eth","getAccounts","Contract","setProvider","currentProvider","instance","deployed","inboxResponse","on","result","setState","receivedIPFS","args","contract","runExample","error","alert","console","log","convertToBuffer","reader","buffer","Buffer","from","captureFile","event","stopPropagation","preventDefault","file","target","files","window","FileReader","readAsArrayBuffer","onloadend","onIPFSSubmit","state","add","err","ipfsHash","hash","onClick","url","location","href","storageValue","formIPFS","formAddress","handleChangeAddress","bind","handleChangeIPFS","handleSend","handleReceiveIPFS","value","account","document","getElementById","reset","showNotification","sendIPFS","then","checkInbox","download","render"],"mappings":"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","sourcesContent":["// import React from 'react';\n\n// function Upload(){\n//     return(\n//         <h1>Upload</h1>\n//     );\n// }\n\n// export default Upload;\nimport React, { Component } from \"react\";\nimport IPFSInboxContract from \"./IPFSInbox.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\nimport ipfs from './ipfs';\n\nclass Upload extends Component {\n    constructor(props) {\n      super(props)\n        this.state = { \n        storageValue: 0, \n        web3: null, \n        accounts: null, \n        contract: null, \n        ipfsHash: null,\n        formIPFS: \"\",\n        formAddress: \"\",\n        receivedIPFS: \"\"\n      };\n  \n      this.handleChangeAddress = this.handleChangeAddress.bind(this);\n      this.handleChangeIPFS = this.handleChangeIPFS.bind(this);\n      this.handleSend = this.handleSend.bind(this);\n      this.handleReceiveIPFS = this.handleReceiveIPFS.bind(this);\n    }\n    \n  \n    componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n  \n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n  \n        // Get the contract instance.\n        const Contract = truffleContract(IPFSInboxContract);\n        Contract.setProvider(web3.currentProvider);\n        const instance = await Contract.deployed();\n  \n        instance.inboxResponse()\n          .on('data', result => {\n            this.setState({receivedIPFS: result.args[0]})\n          });\n  \n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        this.setState({ web3, accounts, contract: instance }, this.runExample);\n  \n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`\n        );\n        console.log(error);\n      }\n    };\n  \n    // BELOW ADDED\n    handleChangeAddress(event){\n      this.setState({formAddress: event.target.value});\n    }\n  \n    handleChangeIPFS(event){\n      this.setState({formIPFS: event.target.value});\n    }\n  \n    handleSend(event){\n      event.preventDefault();\n      const contract = this.state.contract\n      const account = this.state.accounts[0]\n  \n      document.getElementById('new-notification-form').reset()\n      this.setState({showNotification: true});\n      contract.sendIPFS(this.state.formAddress, this.state.formIPFS, {from: account})\n        .then(result => {\n          this.setState({formAddress: \"\"});\n          this.setState({formIPFS: \"\"});\n        })\n    }\n  \n    handleReceiveIPFS(event){\n      event.preventDefault();\n      const contract = this.state.contract\n      const account = this.state.accounts[0]\n      contract.checkInbox({from: account})\n    }\n  \n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer for upload to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n  \n    captureFile = (event) => {\n      event.stopPropagation()\n      event.preventDefault()\n      const file = event.target.files[0]\n      let reader = new window.FileReader()\n      reader.readAsArrayBuffer(file)\n      reader.onloadend = () => this.convertToBuffer(reader)    \n    };\n  \n    onIPFSSubmit = async (event) => {\n      event.preventDefault();\n      \n      //bring in user's metamask account address\n      const accounts = this.state.accounts;\n  \n      console.log('Sending from Metamask account: ' + accounts[0]);\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n  \n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash \n        this.setState({ ipfsHash:ipfsHash[0].hash });\n      })\n      \n    }; \n  \n    onClick = async (event)=>{\n      //\n      if(this.state.ipfsHash == null)\n      {\n        alert('Error!! ,Please upload file first.');\n      }\n      else{\n        var url = \"https://gateway.ipfs.io/ipfs/\";\n        var hash = this.state.ipfsHash;\n        window.location.href=url + hash;\n      }\n    };\n    // ABOVE ADDED \n\n    download(file)\n    {\n      if(file!=null)\n      window.location=file;\n    }\n\n    render() {\n      if (!this.state.web3) {\n        return <div>Loading Web3, accounts, and contract...</div>;\n      }\n      return (\n       \n        <div className=\"App\">\n          \n          <h2>Upload a file to IPFS</h2>\n            <form id=\"ipfs-hash-form\" className=\"scep-form\" onSubmit={this.onIPFSSubmit}>\n              <input \n                type=\"file\"\n                onChange={this.captureFile}\n              />\n              <button\n                type=\"submit\"> \n                Upload \n              </button>\n            </form>\n            \n            <p> The IPFS hash is: {this.state.ipfsHash}</p> \n            <form>\n            <p>Go to File</p><input type=\"button\" value=\"Click\" onClick={this.onClick} />\n            </form>\n            <a>download</a>\n\n            <input type=\"button\" value=\"Download\" onClick={this.download('https://gateway.ipfs.io/ipfs/'+this.state.ipfsHash)} ></input>\n          {/* <h2> 2. Send notifications here </h2>\n            <form id=\"new-notification-form\" className=\"scep-form\" onSubmit={this.handleSend}>\n              <label>\n                Receiver Address:\n                <input type=\"text\" value={this.state.value} onChange={this.handleChangeAddress} />\n              </label>\n              <label>\n                IPFS Address:\n                <input type=\"text\" value={this.state.value} onChange={this.handleChangeIPFS} />\n              </label>\n              <input type=\"submit\" value=\"Submit\" />\n            </form>\n          <h2> 3. Receive Notifications </h2>\n            <button onClick={this.handleReceiveIPFS}>Receive IPFS</button>\n            <p>{this.state.receivedIPFS}</p> */}\n        </div>\n      );\n    }\n  }\n  \n  export default Upload;"]},"metadata":{},"sourceType":"module"}