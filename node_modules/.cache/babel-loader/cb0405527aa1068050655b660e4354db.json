{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/kk/I4C/src/App.js\";\nimport React, { Component } from 'react';\nimport FirstPage from './FirstPage';\nimport Register from './Register';\nimport Home from './Home';\nimport web3 from './web3';\nimport { Table, Grid, Button, Form } from 'react-bootstrap';\nimport storehash from './storehash';\nimport ipfs from './ipfs';\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    };\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n      const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n      this.setState({\n        buffer\n      });\n    };\n\n    this.onClick = async () => {\n      try {\n        this.setState({\n          blockNumber: \"waiting..\"\n        });\n        this.setState({\n          gasUsed: \"waiting...\"\n        }); // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n          console.log(err, txReceipt);\n          this.setState({\n            txReceipt\n          });\n        }); //await for getTransactionReceipt\n\n        await this.setState({\n          blockNumber: this.state.txReceipt.blockNumber\n        });\n        await this.setState({\n          gasUsed: this.state.txReceipt.gasUsed\n        });\n      } //try\n      catch (error) {\n        console.log(error);\n      } //catch\n\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault(); //bring in user's metamask account address\n\n      const accounts = await web3.eth.getAccounts();\n      console.log('Sending from Metamask account: ' + accounts[0]); //obtain contract address from storehash.js\n\n      const ethAddress = await storehash.options.address;\n      this.setState({\n        ethAddress\n      }); //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash \n\n        this.setState({\n          ipfsHash: ipfsHash[0].hash\n        }); // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n        storehash.methods.sendHash(this.state.ipfsHash).send({\n          from: accounts[0]\n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({\n            transactionHash\n          });\n        }); //storehash \n      }); //await ipfs.add \n    };\n  }\n\n  //onSubmit\n  render() {\n    return React.createElement(BrowserRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: FirstPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/Register\",\n      component: Register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/Home\",\n      component: Home,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(Button, {\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \" Get Transaction Receipt \"), React.createElement(Table, {\n      bordered: true,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Values\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"IPFS Hash # stored on Eth Contract\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, this.state.ipfsHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.state.ethAddress)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Tx Hash # \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.state.transactionHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Block Number # \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.state.blockNumber)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Gas Used\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.state.gasUsed)))));\n  }\n\n}","map":{"version":3,"sources":["/Users/macbookpro/Desktop/kk/I4C/src/App.js"],"names":["React","Component","FirstPage","Register","Home","web3","Table","Grid","Button","Form","storehash","ipfs","BrowserRouter","Switch","Route","App","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","setState","onClick","eth","getTransactionReceipt","err","console","log","error","onSubmit","accounts","getAccounts","options","address","add","hash","methods","sendHash","send","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FirstPage  from './FirstPage';\nimport Register  from './Register';\nimport Home  from './Home';\nimport web3 from './web3';\nimport {Table, Grid, Button, Form } from 'react-bootstrap';\nimport storehash from './storehash';\nimport ipfs from './ipfs';\nimport './App.css';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nexport default class App extends Component {\n\n   state = {\n      ipfsHash:null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: ''   \n    };\n   \n    captureFile =(event) => {\n        event.stopPropagation()\n        event.preventDefault()\n        const file = event.target.files[0]\n        let reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => this.convertToBuffer(reader)    \n      };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    onClick = async () => {\n\n    try{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting...\"});\n\n        // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        }); //await for getTransactionReceipt\n\n        await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n        await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n      } //try\n    catch(error){\n        console.log(error);\n      } //catch\n  } //onClick\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n\n      //bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n     \n      console.log('Sending from Metamask account: ' + accounts[0]);\n\n      //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      this.setState({ethAddress});\n\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash \n        this.setState({ ipfsHash:ipfsHash[0].hash });\n\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n        \n        storehash.methods.sendHash(this.state.ipfsHash).send({\n          from: accounts[0] \n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({transactionHash});\n        }); //storehash \n      }) //await ipfs.add \n    }; //onSubmit\n\n\n  render() {\n      return(\n        <BrowserRouter>\n          <Switch>\n            <Route exact path=\"/\" component={FirstPage} />\n            <Route exact path=\"/Register\" component={Register} />\n            <Route exact path=\"/Home\" component={Home} />\n          </Switch> \n        \n            <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n\n              <Table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n               \n                <tbody>\n                  <tr>\n                    <td>IPFS Hash # stored on Eth Contract</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Tx Hash # </td>\n                    <td>{this.state.transactionHash}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Block Number # </td>\n                    <td>{this.state.blockNumber}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Gas Used</td>\n                    <td>{this.state.gasUsed}</td>\n                  </tr>                \n                </tbody>\n            </Table>\n            </BrowserRouter>\n      )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}